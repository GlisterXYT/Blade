_G.BLADEBALL_SCRIPT_VERSION = "V6"
loadstring(game:HttpGet("https://pandadevelopment.net/virtual/file/cff692f481cacd58"))()
-- CONFIGURATION
local WEBHOOK_URL = "https://discord.com/api/webhooks/1394346190954430496/y1TQYKAIuBUPjBHKNNiqqiMxR1rWvUCPmymOphs0LMutKalPDjuxiCHWz4isseAM9fzB"
local CHECK_INTERVAL = 300 -- 5 minutes (win check)
local REJOIN_INTERVAL = 36000 -- 10 hours (auto rejoin)
local UPDATE_CHECK_INTERVAL = 300 -- 10 minutes (script update check)
local SCRIPT_URL = "https://raw.githubusercontent.com/GlisterXYT/Blade/main/Blade.txt"
local VERSION_PREFIX = '_G.BLADEBALL_SCRIPT_VERSION = "'
local LOG_FILE_PATH = "C:\Users\Home\AppData\Local\Xeno\workspace\Blade"
local SKIP_VERSIONS_PATH = "C:\Users\Home\AppData\Local\Xeno\workspace\Blade"

-- SERVICES
local Players = game:GetService("Players")
local GuiService = game:GetService("GuiService")
local TeleportService = game:GetService("TeleportService")
local HttpService = game:GetService("HttpService")
local Lighting = game:GetService("Lighting")
local StarterGui = game:GetService("StarterGui")
local VirtualInputManager = game:GetService("VirtualInputManager")
local RunService = game:GetService("RunService")

-- PLAYER
local player = Players.LocalPlayer or Players.PlayerAdded:Wait()
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")
local camera = workspace.CurrentCamera
local placeId = game.PlaceId

-- HTTP REQUEST
local httpRequest = request or (syn and syn.request) or (http and http.request)
if not httpRequest then
    warn("Executor doesn't support HTTP requests.")
    return
end

-- SCRIPT STATE
local stopScript = false
local currentVersion = nil
local failCount = 0
local failedVersions = {}



-- ERROR CODES (for reconnect notifications)
local errorCodes = {
    [404] = {keyword = "Disconnected", explanation = "You got disconnected from the server."},
    [412] = {keyword = "Failed to join", explanation = "Failed to join the server."},
    [865] = {keyword = "Server closed the connection", explanation = "Server closed the connection unexpectedly."},
    [593] = {keyword = "Timeout", explanation = "Connection timed out."},
    [724] = {keyword = "Teleport failed", explanation = "Teleportation failed."},
}

-- Load blacklist (skip versions) file
pcall(function()
    if isfile and isfile(SKIP_VERSIONS_PATH) then
        local content = readfile(SKIP_VERSIONS_PATH)
        failedVersions = HttpService:JSONDecode(content)
        sendEmbed("‚ÑπÔ∏è Skip Versions Loaded", "Blacklist loaded from:\n" .. SKIP_VERSIONS_PATH, 0x8888FF)
    else
        sendEmbed("‚ÑπÔ∏è Skip Versions File Missing", "No blacklist file found. New file will be created at:\n" .. SKIP_VERSIONS_PATH, 0x8888FF)
    end
end)

-- Save blacklist file
local function saveFailures()
    pcall(function()
        if writefile then
            writefile(SKIP_VERSIONS_PATH, HttpService:JSONEncode(failedVersions))
        end
    end)
end

-- Log update attempts to file
local function logUpdate(version, status)
    pcall(function()
        if appendfile then
            appendfile(LOG_FILE_PATH, os.date("[%Y-%m-%d %H:%M:%S]") .. " Version " .. version .. ": " .. status .. "\n")
        end
    end)
end

-- Discord webhook sender
function sendEmbed(title, description, color)
    if stopScript then return end
    local data = HttpService:JSONEncode({
        embeds = {{
            title = title,
            description = description,
            color = color,
            footer = { text = "Blade Ball Auto Tracker " .. (currentVersion or "Unknown") .. " | User: glisterx" },
            timestamp = os.date("!%Y-%m-%dT%H:%M:%SZ")
        }}
    })
    pcall(function()
        httpRequest({
            Url = WEBHOOK_URL,
            Method = "POST",
            Headers = { ["Content-Type"] = "application/json" },
            Body = data
        })
    end)
end

-- Fetch script version from remote
local function fetchVersion()
    local ok, res = pcall(function()
        return game:HttpGet(SCRIPT_URL)
    end)
    if ok and res then
        return res:match(VERSION_PREFIX .. "([^\"%s]+)")
    end
    return nil
end

-- Safe teleport with retry
local function safeTeleport()
    repeat
        local success = pcall(function()
            TeleportService:Teleport(placeId, player)
        end)
        if success then break end
        task.wait(30)
    until stopScript
end

-- Show startup notification GUI
local function showStartupNotification()
    local gui = Instance.new("ScreenGui")
    gui.Name = "BladeBallStartupNotifyV3"
    gui.ResetOnSpawn = false
    gui.Parent = game.CoreGui

    local label = Instance.new("TextLabel")
    label.Size = UDim2.new(0, 300, 0, 50)
    label.Position = UDim2.new(0.5, -150, 0.1, 0)
    label.BackgroundColor3 = Color3.new(0, 0, 0)
    label.TextColor3 = Color3.new(1, 1, 1)
    label.TextScaled = true
    label.Text = "Blade Ball Auto Tracker V6 Active"
    label.Parent = gui

    task.delay(10, function() gui:Destroy() end)
end

-- Apply low graphics settings to improve performance
local function applyLowGraphics()
    Lighting.GlobalShadows = false
    Lighting.FogEnd = 1e6
    Lighting.Brightness = 0.5
    Lighting.ClockTime = 14
    Lighting.OutdoorAmbient = Color3.fromRGB(50, 50, 50)

    for _, v in ipairs(workspace:GetDescendants()) do
        if v:IsA("ParticleEmitter") or v:IsA("Trail") or v:IsA("Smoke") or v:IsA("Fire") or v:IsA("Sparkles") then
            v.Enabled = false
        elseif v:IsA("Decal") or v:IsA("Texture") then
            v.Transparency = 1
        elseif v:IsA("Light") then
            v.Enabled = false
        elseif v:IsA("MeshPart") or v:IsA("UnionOperation") or v:IsA("BasePart") then
            v.Material = Enum.Material.Plastic
            v.Reflectance = 0
            if v:IsA("MeshPart") then v.TextureID = "" end
        end
    end
end

-- Press key helper
local function pressKey(key)
    VirtualInputManager:SendKeyEvent(true, key, false, game)
    task.wait(0.05)
    VirtualInputManager:SendKeyEvent(false, key, false, game)
end

-- Auto update logic (hybrid: try load first, then teleport on success)
local function autoUpdate()
    task.spawn(function()
        while not stopScript do
            task.wait(UPDATE_CHECK_INTERVAL)
            if stopScript then return end

            local newVer = fetchVersion()
            if newVer and newVer ~= currentVersion and not failedVersions[newVer] then
                sendEmbed("üîÑ Script Update", "New version **" .. newVer .. "** detected. Attempting to load...", 0x00FFFF)

                local success, scriptText = pcall(function()
                    return game:HttpGet(SCRIPT_URL)
                end)

                if success and type(scriptText) == "string" and scriptText:find("main%(") then
                    local loadedFunc, loadErr = loadstring(scriptText)
                    if typeof(loadedFunc) == "function" then
                        sendEmbed("‚úÖ Update Load Success", "Version "..newVer.." loaded successfully. Teleporting to reload.", 0x00FF00)
                        logUpdate(newVer, "Load Success, teleporting")
                        stopScript = true
                        safeTeleport()
                        return
                    else
                        failCount += 1
                        logUpdate(newVer, "Load error: " .. (loadErr or "unknown"))
                        sendEmbed("‚ùå Load Error", "Failed to load V"..newVer..": "..(loadErr or "unknown"), 0xFF0000)
                    end
                else
                    failCount += 1
                    logUpdate(newVer, "Fetch error or invalid script")
                    sendEmbed("‚ùå Fetch Error", "Failed to fetch or invalid script for V"..newVer, 0xFF0000)
                end

                if failCount >= 2 then
                    failedVersions[newVer] = true
                    saveFailures()
                    sendEmbed("‚ö†Ô∏è Version Blacklisted", "Skipped V"..newVer.." after 2 failures.\nBlacklist file: "..SKIP_VERSIONS_PATH, 0xFFA500)
                    failCount = 0
                end
            end
        end
    end)
end

-- Error reconnect handler
local function setupErrorReconnect()
    GuiService.ErrorMessageChanged:Connect(function(msg)
        if stopScript then return end
        for code, e in pairs(errorCodes) do
            if msg:find(e.keyword) then
                sendEmbed("‚ùó Disconnected ("..code..")", e.explanation, 0xFF0000)
                safeTeleport()
                break
            end
        end
    end)
end

-- Main script logic
local function main()
    stopScript = false
    currentVersion = fetchVersion() or "Unknown"
    sendEmbed("‚úÖ Script Loaded", "Blade Ball " .. currentVersion .. " is now active.", 0x00FF00)
    showStartupNotification()
    applyLowGraphics()
    setupErrorReconnect()

    local PASTEBIN_URL = "https://pastebin.com/raw/ShaTx5rL"
    local PASTEBIN_CHECK_INTERVAL = 30
    local REJOIN_TRIGGER = "!rejoin"

    -- Pastebin command polling loop
    task.spawn(function()
        while not stopScript do
            task.wait(PASTEBIN_CHECK_INTERVAL)
            if stopScript then return end

            local success, content = pcall(function()
                return game:HttpGet(PASTEBIN_URL)
            end)

            if success and content then
                local trimmed = content:match("^%s*(.-)%s*$")
                if trimmed == REJOIN_TRIGGER then
                    sendEmbed("üîÑ Pastebin Command", "Rejoin command '!rejoin' received via Pastebin. Rejoining now...", 0x3366FF)
                    safeTeleport()
                end
            end
        end
    end)

    -- Auto rejoin loop (refresh every 10 hours)
    task.spawn(function()
        while not stopScript do
            task.wait(REJOIN_INTERVAL)
            sendEmbed("üîÅ Rejoin", "Rejoining to refresh FPS...", 0x3366FF)
            safeTeleport()
        end
    end)

    -- Smart evasion movement with WASD
    task.spawn(function()
        local keys = {W = Enum.KeyCode.W, A = Enum.KeyCode.A, S = Enum.KeyCode.S, D = Enum.KeyCode.D}

        local function getNearestPlayer()
            local closest = nil
            local shortestDistance = math.huge
            local myHRP = character:FindFirstChild("HumanoidRootPart")
            if not myHRP then return nil end

            for _, p in pairs(Players:GetPlayers()) do
                if p ~= player and p.Character and p.Character:FindFirstChild("HumanoidRootPart") then
                    local theirHRP = p.Character.HumanoidRootPart
                    local dist = (myHRP.Position - theirHRP.Position).Magnitude
                    if dist < shortestDistance then
                        shortestDistance = dist
                        closest = theirHRP
                    end
                end
            end
            return closest, shortestDistance
        end

        while not stopScript do
            local myHRP = character:FindFirstChild("HumanoidRootPart")
            if not myHRP then task.wait(1) continue end

            local closestHRP, distance = getNearestPlayer()
            if closestHRP and distance < 30 then
                local diff = myHRP.Position - closestHRP.Position
                local moveX = math.abs(diff.X) > math.abs(diff.Z) and (diff.X > 0 and "D" or "A") or (diff.Z > 0 and "S" or "W")
                pressKey(keys[moveX])
                pressKey(Enum.KeyCode.Space)
                task.wait(0.3)
                pressKey(Enum.KeyCode.Space)
            end
            task.wait(1)
        end
    end)

    -- Win tracking
    task.spawn(function()
        while not player:FindFirstChild("leaderstats") or not player.leaderstats:FindFirstChild("Wins") do task.wait(1) end

        local lastWins = player.leaderstats.Wins.Value
        local totalGained = 0
        local noWinIntervals = 0

        sendEmbed("üìä Starting Wins", "Current: **" .. lastWins .. "**", 0x00FF00)

        while not stopScript do
            task.wait(CHECK_INTERVAL)
            local now = player.leaderstats.Wins.Value
            local gained = now - lastWins
            lastWins = now

            if gained > 0 then
                totalGained += gained
                noWinIntervals = 0
                sendEmbed("üèÜ Wins Gained", "Gained **" .. gained .. "**, Total: **" .. totalGained .. "**, Now: **" .. now .. "**", 0x00FF00)
            else
                noWinIntervals += 1
                sendEmbed("‚è≥ No Wins", "No wins this interval. Total: **" .. totalGained .. "**, Now: **" .. now .. "**", 0xFFFF00)
                if noWinIntervals >= 2 then
                    noWinIntervals = 0
                    sendEmbed("üîÑ Server Hop", "No wins in 10 mins. Hopping...", 0xFF5500)
                    safeTeleport()
                end
            end
        end
    end)

    -- Screen rotate
    task.spawn(function()
        local lastYaw = 0
        while not stopScript do
            task.wait(5)
            local delta = math.rad(math.random(50, 180)) * (math.random(0, 1) * 2 - 1)
            lastYaw += delta
            local pos = camera.CFrame.Position
            camera.CFrame = CFrame.new(pos, pos + Vector3.new(math.sin(lastYaw), 0, math.cos(lastYaw)))
        end
    end)
end

-- Run update and main
autoUpdate()
main()
