_G.BLADEBALL_SCRIPT_VERSION = "V4"

-- CONFIGURATION
local WEBHOOK_URL = "https://discord.com/api/webhooks/1394346190954430496/y1TQYKAIuBUPjBHKNNiqqiMxR1rWvUCPmymOphs0LMutKalPDjuxiCHWz4isseAM9fzB"
local CHECK_INTERVAL = 300 -- 5 minutes
local REJOIN_INTERVAL = 7200 -- 2 hours
local UPDATE_CHECK_INTERVAL = 300 -- 5 minutes
local SCRIPT_URL = "https://raw.githubusercontent.com/GlisterXYT/Blade/main/Blade.txt"
local VERSION_PREFIX = '_G.BLADEBALL_SCRIPT_VERSION = "'

-- FILE PATHS for Delta Android
local SKIP_VERSIONS_FILE = "sdcard/Delta/Autoexecute/skip_versions.json"
local LOG_FILE = "sdcard/Delta/Autoexecute/update_log.txt"

-- SERVICES
local Players = game:GetService("Players")
local GuiService = game:GetService("GuiService")
local TeleportService = game:GetService("TeleportService")
local HttpService = game:GetService("HttpService")
local Lighting = game:GetService("Lighting")
local StarterGui = game:GetService("StarterGui")
local VirtualInputManager = game:GetService("VirtualInputManager")
local RunService = game:GetService("RunService")

-- PLAYER
local player = Players.LocalPlayer or Players.PlayerAdded:Wait()
local character = player.Character or player.CharacterAdded:Wait()
local camera = workspace.CurrentCamera
local placeId = game.PlaceId

-- HTTP
local httpRequest = request or (syn and syn.request) or (http and http.request)
if not httpRequest then return warn("Executor doesn't support HTTP requests.") end

-- SCRIPT STATE
local stopScript = false
local currentVersion = nil
local failCount = 0
local failedVersions = {}

-- LOAD FILE DATA safely
pcall(function()
    if isfile and isfile(SKIP_VERSIONS_FILE) then
        failedVersions = HttpService:JSONDecode(readfile(SKIP_VERSIONS_FILE))
    end
end)

-- SAVE FAILURE
local function saveFailures()
    pcall(function()
        if writefile then
            writefile(SKIP_VERSIONS_FILE, HttpService:JSONEncode(failedVersions))
        end
    end)
end

-- LOG TO FILE
local function logUpdate(version, status)
    pcall(function()
        if appendfile then
            appendfile(LOG_FILE, os.date("[%Y-%m-%d %H:%M:%S] ") .. "Version " .. version .. ": " .. status .. "\n")
        end
    end)
end

-- LOG RUNTIME ERRORS
local function logRuntimeError(msg)
    pcall(function()
        if appendfile then
            appendfile(LOG_FILE, os.date("[%Y-%m-%d %H:%M:%S] [Runtime Error] " .. msg .. "\n"))
        end
    end)
end

-- DISCORD WEBHOOK
local function sendEmbed(title, description, color)
    if stopScript then return end
    local data = HttpService:JSONEncode({
        embeds = {{
            title = title,
            description = description,
            color = color,
            footer = { text = "Blade Ball Auto Tracker " .. (currentVersion or "Unknown") .. " | User: glisterx" },
            timestamp = os.date("!%Y-%m-%dT%H:%M:%SZ")
        }}
    })
    pcall(function()
        httpRequest({
            Url = WEBHOOK_URL,
            Method = "POST",
            Headers = { ["Content-Type"] = "application/json" },
            Body = data
        })
    end)
end

-- FETCH VERSION
local function fetchVersion()
    local ok, res = pcall(function()
        return game:HttpGet(SCRIPT_URL)
    end)
    return ok and res:match(VERSION_PREFIX .. "([^"]+)") or nil
end

-- SAFE TELEPORT
local function safeTeleport()
    repeat
        local success = pcall(function()
            TeleportService:Teleport(placeId, player)
        end)
        if success then break end
        task.wait(30)
    until stopScript
end

-- AUTO-UPDATE
local function autoUpdate()
    task.spawn(function()
        while true do
            task.wait(UPDATE_CHECK_INTERVAL)
            if stopScript then return end

            local newVer = fetchVersion()
            if newVer and newVer ~= currentVersion and not failedVersions[newVer] then
                sendEmbed("üîÑ Script Update", "New version **" .. newVer .. "** detected. Attempting...", 0x00FFFF)
                local success, scriptText = pcall(function()
                    return game:HttpGet(SCRIPT_URL)
                end)

                if success and type(scriptText) == "string" and scriptText:find("main%(") then
                    local loadedFunc, err = loadstring(scriptText)
                    if typeof(loadedFunc) == "function" then
                        stopScript = true
                        logUpdate(newVer, "‚úÖ Success")
                        sendEmbed("‚úÖ Updated", "Now running V" .. newVer, 0x00FF00)
                        loadedFunc()
                        return
                    else
                        failCount += 1
                        logUpdate(newVer, "‚ùå Load error: " .. tostring(err))
                    end
                else
                    failCount += 1
                    logUpdate(newVer, "‚ùå Fetch error")
                end

                if failCount >= 2 then
                    failedVersions[newVer] = true
                    saveFailures()
                    sendEmbed("‚ö†Ô∏è Skipped Version", "2 fails on V" .. newVer .. ". Will not try again.", 0xFFA500)
                end
            end
        end
    end)
end

-- WRAPPER for safe async task calls with runtime error catch
local function safeTask(func)
    task.spawn(function()
        while not stopScript do
            local ok, err = pcall(func)
            if not ok then
                logRuntimeError(err)
                sendEmbed("‚ùå Runtime Error", tostring(err), 0xFF0000)
                task.wait(5)
            end
            task.wait(1)
        end
    end)
end

-- MAIN FUNCTION
local function main()
    currentVersion = fetchVersion() or "Unknown"
    sendEmbed("‚úÖ Script Loaded", "Blade Ball V" .. currentVersion .. " is now active.", 0x00FF00)

    -- Movement AI
    safeTask(function()
        local char = player.Character or player.CharacterAdded:Wait()
        local myHRP = char:FindFirstChild("HumanoidRootPart")
        if not myHRP then task.wait(1) return end

        local closest, dist = nil, math.huge
        for _, p in pairs(Players:GetPlayers()) do
            if p ~= player and p.Character and p.Character:FindFirstChild("HumanoidRootPart") then
                local other = p.Character.HumanoidRootPart
                local d = (myHRP.Position - other.Position).Magnitude
                if d < dist then
                    dist = d
                    closest = other
                end
            end
        end

        if closest and dist < 30 then
            local offset = myHRP.Position - closest.Position
            local direction = math.abs(offset.X) > math.abs(offset.Z) and (offset.X > 0 and "D" or "A") or (offset.Z > 0 and "S" or "W")
            VirtualInputManager:SendKeyEvent(true, Enum.KeyCode[direction], false, game)
            task.wait(0.1)
            VirtualInputManager:SendKeyEvent(false, Enum.KeyCode[direction], false, game)
            VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.Space, false, game)
            task.wait(0.05)
            VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.Space, false, game)
        end
    end)

    -- Win Tracker
    safeTask(function()
        local lastWins = 0
        local gainedTotal = 0
        local noWinStreak = 0

        while not player:FindFirstChild("leaderstats") or not player.leaderstats:FindFirstChild("Wins") do task.wait(1) end
        lastWins = player.leaderstats.Wins.Value

        sendEmbed("üìä Starting Wins", "Current: **"..lastWins.."**", 0x00FF00)

        while not stopScript do
            task.wait(CHECK_INTERVAL)
            local now = player.leaderstats.Wins.Value
            local diff = now - lastWins
            lastWins = now

            if diff > 0 then
                gainedTotal += diff
                noWinStreak = 0
                sendEmbed("üèÜ Wins Gained", "Gained **"..diff.."**, Total: **"..gainedTotal.."**, Now: **"..now.."**", 0x00FF00)
            else
                noWinStreak += 1
                sendEmbed("‚è≥ No Wins", "No wins. Total: **"..gainedTotal.."**, Now: **"..now.."**", 0xFFFF00)
                if noWinStreak >= 2 then
                    noWinStreak = 0
                    sendEmbed("üîÑ Server Hop", "No wins in 10 mins. Hopping...", 0xFF5500)
                    safeTeleport()
                end
            end
        end
    end)

    -- Hourly Refresh
    safeTask(function()
        while not stopScript do
            task.wait(REJOIN_INTERVAL)
            sendEmbed("üîÅ Rejoin", "Rejoining to refresh FPS...", 0x3366FF)
            safeTeleport()
        end
    end)

    -- Screen Spin
    safeTask(function()
        local lastYaw = 0
        while not stopScript do
            task.wait(5)
            local delta = math.rad(math.random(60, 180)) * (math.random(0, 1)*2-1)
            lastYaw += delta
            local pos = camera.CFrame.Position
            camera.CFrame = CFrame.new(pos, pos + Vector3.new(math.sin(lastYaw), 0, math.cos(lastYaw)))
        end
    end)
end

autoUpdate()
main()
